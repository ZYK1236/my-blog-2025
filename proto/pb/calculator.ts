/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.6
 * source: calculator.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace calculator {
    export class AddRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            a?: number;
            b?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("a" in data && data.a != undefined) {
                    this.a = data.a;
                }
                if ("b" in data && data.b != undefined) {
                    this.b = data.b;
                }
            }
        }
        get a() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set a(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get b() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set b(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            a?: number;
            b?: number;
        }): AddRequest {
            const message = new AddRequest({});
            if (data.a != null) {
                message.a = data.a;
            }
            if (data.b != null) {
                message.b = data.b;
            }
            return message;
        }
        toObject() {
            const data: {
                a?: number;
                b?: number;
            } = {};
            if (this.a != null) {
                data.a = this.a;
            }
            if (this.b != null) {
                data.b = this.b;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.a != 0)
                writer.writeInt32(1, this.a);
            if (this.b != 0)
                writer.writeInt32(2, this.b);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.a = reader.readInt32();
                        break;
                    case 2:
                        message.b = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddRequest {
            return AddRequest.deserialize(bytes);
        }
    }
    export class AddResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set result(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            result?: number;
        }): AddResponse {
            const message = new AddResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: number;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result != 0)
                writer.writeInt32(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddResponse {
            return AddResponse.deserialize(bytes);
        }
    }
    export class BlogRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            name?: string;
        }): BlogRequest {
            const message = new BlogRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlogRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlogRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlogRequest {
            return BlogRequest.deserialize(bytes);
        }
    }
    export class BlogResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            content?: string;
            found?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("found" in data && data.found != undefined) {
                    this.found = data.found;
                }
            }
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get found() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set found(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            content?: string;
            found?: boolean;
        }): BlogResponse {
            const message = new BlogResponse({});
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.found != null) {
                message.found = data.found;
            }
            return message;
        }
        toObject() {
            const data: {
                content?: string;
                found?: boolean;
            } = {};
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.found != null) {
                data.found = this.found;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.content.length)
                writer.writeString(1, this.content);
            if (this.found != false)
                writer.writeBool(2, this.found);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlogResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlogResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.content = reader.readString();
                        break;
                    case 2:
                        message.found = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlogResponse {
            return BlogResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedCalculatorService {
        static definition = {
            Add: {
                path: "/calculator.Calculator/Add",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AddRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AddRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AddResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AddResponse.deserialize(new Uint8Array(bytes))
            },
            GetBlog: {
                path: "/calculator.Calculator/GetBlog",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BlogRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BlogRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BlogResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BlogResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Add(call: grpc_1.ServerUnaryCall<AddRequest, AddResponse>, callback: grpc_1.sendUnaryData<AddResponse>): void;
        abstract GetBlog(call: grpc_1.ServerUnaryCall<BlogRequest, BlogResponse>, callback: grpc_1.sendUnaryData<BlogResponse>): void;
    }
    export class CalculatorClient extends grpc_1.makeGenericClientConstructor(UnimplementedCalculatorService.definition, "Calculator", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Add: GrpcUnaryServiceInterface<AddRequest, AddResponse> = (message: AddRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AddResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AddResponse>, callback?: grpc_1.requestCallback<AddResponse>): grpc_1.ClientUnaryCall => {
            return super.Add(message, metadata, options, callback);
        };
        GetBlog: GrpcUnaryServiceInterface<BlogRequest, BlogResponse> = (message: BlogRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BlogResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BlogResponse>, callback?: grpc_1.requestCallback<BlogResponse>): grpc_1.ClientUnaryCall => {
            return super.GetBlog(message, metadata, options, callback);
        };
    }
}
